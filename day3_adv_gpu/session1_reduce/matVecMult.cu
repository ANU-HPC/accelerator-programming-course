/*
 * Copyright 2019 Australian National University
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either or express implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * matrixMult - a simple program to multiply a matix with a vector. 
 * Eric McCreath 2019 GPL
 */

#include <cuda.h>
#include <stdio.h>

#define N 1024

float check[] = {2.552720e+02, 2.552258e+02, 2.632946e+02, 2.538730e+02, 2.598031e+02, 2.507951e+02, 2.611553e+02, 2.522578e+02, 2.546898e+02, 2.665719e+02, 2.537216e+02, 2.577414e+02, 2.682007e+02, 2.558517e+02, 2.556803e+02, 2.567493e+02, 2.524541e+02, 2.542162e+02, 2.514664e+02, 2.570097e+02, 2.630053e+02, 2.662202e+02, 2.736306e+02, 2.538764e+02, 2.546497e+02, 2.563177e+02, 2.606696e+02, 2.613666e+02, 2.679160e+02, 2.525054e+02, 2.601814e+02, 2.641865e+02, 2.522569e+02, 2.540748e+02, 2.568015e+02, 2.582445e+02, 2.570219e+02, 2.629012e+02, 2.629501e+02, 2.565427e+02, 2.536415e+02, 2.581185e+02, 2.611176e+02, 2.603749e+02, 2.568520e+02, 2.541336e+02, 2.611769e+02, 2.685237e+02, 2.662138e+02, 2.570578e+02, 2.550309e+02, 2.629060e+02, 2.566045e+02, 2.503891e+02, 2.621764e+02, 2.557528e+02, 2.577214e+02, 2.632845e+02, 2.670856e+02, 2.650697e+02, 2.623648e+02, 2.609703e+02, 2.531840e+02, 2.548347e+02, 2.634566e+02, 2.539293e+02, 2.655023e+02, 2.592128e+02, 2.661927e+02, 2.570188e+02, 2.639456e+02, 2.584418e+02, 2.622044e+02, 2.633886e+02, 2.556061e+02, 2.629922e+02, 2.608712e+02, 2.524624e+02, 2.681777e+02, 2.505679e+02, 2.645514e+02, 2.621846e+02, 2.547168e+02, 2.606016e+02, 2.577228e+02, 2.534374e+02, 2.584993e+02, 2.540095e+02, 2.641514e+02, 2.622577e+02, 2.649903e+02, 2.600605e+02, 2.540739e+02, 2.602404e+02, 2.563000e+02, 2.574419e+02, 2.678952e+02, 2.689308e+02, 2.683282e+02, 2.671033e+02, 2.602888e+02, 2.578032e+02, 2.592066e+02, 2.579740e+02, 2.634205e+02, 2.628668e+02, 2.560754e+02, 2.643443e+02, 2.559639e+02, 2.579313e+02, 2.573758e+02, 2.574776e+02, 2.622254e+02, 2.516620e+02, 2.611321e+02, 2.645507e+02, 2.597337e+02, 2.611842e+02, 2.630410e+02, 2.602058e+02, 2.535898e+02, 2.619639e+02, 2.587436e+02, 2.588218e+02, 2.583846e+02, 2.534481e+02, 2.488372e+02, 2.645471e+02, 2.597965e+02, 2.541749e+02, 2.587372e+02, 2.557028e+02, 2.641617e+02, 2.629292e+02, 2.563199e+02, 2.576629e+02, 2.576889e+02, 2.588962e+02, 2.639374e+02, 2.550559e+02, 2.610821e+02, 2.555940e+02, 2.497512e+02, 2.628462e+02, 2.629153e+02, 2.661794e+02, 2.609756e+02, 2.576400e+02, 2.681146e+02, 2.548356e+02, 2.677149e+02, 2.503848e+02, 2.602170e+02, 2.639268e+02, 2.619034e+02, 2.533117e+02, 2.636133e+02, 2.577033e+02, 2.494671e+02, 2.569018e+02, 2.532895e+02, 2.635432e+02, 2.558976e+02, 2.579958e+02, 2.474348e+02, 2.645293e+02, 2.719909e+02, 2.626785e+02, 2.492362e+02, 2.536190e+02, 2.648829e+02, 2.598615e+02, 2.632823e+02, 2.581988e+02, 2.630313e+02, 2.520943e+02, 2.576057e+02, 2.651516e+02, 2.639998e+02, 2.643946e+02, 2.516595e+02, 2.563329e+02, 2.537414e+02, 2.632247e+02, 2.567536e+02, 2.591208e+02, 2.504634e+02, 2.604140e+02, 2.471125e+02, 2.502927e+02, 2.581606e+02, 2.574032e+02, 2.605390e+02, 2.587396e+02, 2.644538e+02, 2.487361e+02, 2.456243e+02, 2.621156e+02, 2.697321e+02, 2.537085e+02, 2.641689e+02, 2.449063e+02, 2.578723e+02, 2.505794e+02, 2.581714e+02, 2.598653e+02, 2.530403e+02, 2.550713e+02, 2.567900e+02, 2.660979e+02, 2.623531e+02, 2.549896e+02, 2.625483e+02, 2.586725e+02, 2.726414e+02, 2.592823e+02, 2.650104e+02, 2.540169e+02, 2.632265e+02, 2.597079e+02, 2.620775e+02, 2.606231e+02, 2.700184e+02, 2.622241e+02, 2.570462e+02, 2.590997e+02, 2.530422e+02, 2.623694e+02, 2.547920e+02, 2.527542e+02, 2.538128e+02, 2.514711e+02, 2.635987e+02, 2.456251e+02, 2.524792e+02, 2.562191e+02, 2.539264e+02, 2.640200e+02, 2.553448e+02, 2.626931e+02, 2.585989e+02, 2.616396e+02, 2.613784e+02, 2.601143e+02, 2.562725e+02, 2.634482e+02, 2.622957e+02, 2.695269e+02, 2.621700e+02, 2.710670e+02, 2.546815e+02, 2.535598e+02, 2.662682e+02, 2.698750e+02, 2.602944e+02, 2.666425e+02, 2.611065e+02, 2.588035e+02, 2.546206e+02, 2.570833e+02, 2.649789e+02, 2.656966e+02, 2.574080e+02, 2.529789e+02, 2.571001e+02, 2.561310e+02, 2.627899e+02, 2.682058e+02, 2.593784e+02, 2.627404e+02, 2.586995e+02, 2.607265e+02, 2.685208e+02, 2.602703e+02, 2.655372e+02, 2.570205e+02, 2.571554e+02, 2.601033e+02, 2.632589e+02, 2.524455e+02, 2.590154e+02, 2.558821e+02, 2.548212e+02, 2.594337e+02, 2.660360e+02, 2.540584e+02, 2.543838e+02, 2.630906e+02, 2.658163e+02, 2.633539e+02, 2.580713e+02, 2.677538e+02, 2.610464e+02, 2.635620e+02, 2.642058e+02, 2.646706e+02, 2.600314e+02, 2.513536e+02, 2.563854e+02, 2.596095e+02, 2.702065e+02, 2.640406e+02, 2.632986e+02, 2.578248e+02, 2.643373e+02, 2.616728e+02, 2.555817e+02, 2.594932e+02, 2.563253e+02, 2.662451e+02, 2.594793e+02, 2.654959e+02, 2.605135e+02, 2.533730e+02, 2.702047e+02, 2.512458e+02, 2.618495e+02, 2.543914e+02, 2.551356e+02, 2.595524e+02, 2.492904e+02, 2.635921e+02, 2.642455e+02, 2.589082e+02, 2.595174e+02, 2.630742e+02, 2.555047e+02, 2.654360e+02, 2.610272e+02, 2.601051e+02, 2.653025e+02, 2.633616e+02, 2.538212e+02, 2.715619e+02, 2.662337e+02, 2.627644e+02, 2.508116e+02, 2.648782e+02, 2.619047e+02, 2.655605e+02, 2.587602e+02, 2.574797e+02, 2.582148e+02, 2.673211e+02, 2.604654e+02, 2.584018e+02, 2.726103e+02, 2.543261e+02, 2.536204e+02, 2.623605e+02, 2.717714e+02, 2.625673e+02, 2.555194e+02, 2.639051e+02, 2.678226e+02, 2.648234e+02, 2.683910e+02, 2.526189e+02, 2.616028e+02, 2.551973e+02, 2.587609e+02, 2.569343e+02, 2.536975e+02, 2.583947e+02, 2.603503e+02, 2.560361e+02, 2.521122e+02, 2.533844e+02, 2.581558e+02, 2.574300e+02, 2.633118e+02, 2.610310e+02, 2.587378e+02, 2.553400e+02, 2.594291e+02, 2.527303e+02, 2.696138e+02, 2.604237e+02, 2.602546e+02, 2.611545e+02, 2.512591e+02, 2.609869e+02, 2.590718e+02, 2.650110e+02, 2.670131e+02, 2.555203e+02, 2.611652e+02, 2.509251e+02, 2.608952e+02, 2.555855e+02, 2.564879e+02, 2.533905e+02, 2.606754e+02, 2.668935e+02, 2.533968e+02, 2.638532e+02, 2.496326e+02, 2.593349e+02, 2.495178e+02, 2.540079e+02, 2.570573e+02, 2.584443e+02, 2.493401e+02, 2.470751e+02, 2.582566e+02, 2.548921e+02, 2.575331e+02, 2.549081e+02, 2.559280e+02, 2.608994e+02, 2.515992e+02, 2.608099e+02, 2.558627e+02, 2.660074e+02, 2.536303e+02, 2.595079e+02, 2.647559e+02, 2.578594e+02, 2.594076e+02, 2.717671e+02, 2.644296e+02, 2.554134e+02, 2.579474e+02, 2.567623e+02, 2.586147e+02, 2.575495e+02, 2.554672e+02, 2.668362e+02, 2.651012e+02, 2.651916e+02, 2.617365e+02, 2.615901e+02, 2.653791e+02, 2.520210e+02, 2.690578e+02, 2.516959e+02, 2.578143e+02, 2.600312e+02, 2.602012e+02, 2.618872e+02, 2.624298e+02, 2.597643e+02, 2.592680e+02, 2.711787e+02, 2.497679e+02, 2.604183e+02, 2.640823e+02, 2.548323e+02, 2.645120e+02, 2.533349e+02, 2.584778e+02, 2.605809e+02, 2.622652e+02, 2.595660e+02, 2.551302e+02, 2.540342e+02, 2.573131e+02, 2.741556e+02, 2.542180e+02, 2.522569e+02, 2.656556e+02, 2.543882e+02, 2.626231e+02, 2.637411e+02, 2.646267e+02, 2.607642e+02, 2.564200e+02, 2.628492e+02, 2.557261e+02, 2.637426e+02, 2.625862e+02, 2.629425e+02, 2.563366e+02, 2.567610e+02, 2.641465e+02, 2.571055e+02, 2.612766e+02, 2.678476e+02, 2.697169e+02, 2.628594e+02, 2.471832e+02, 2.643073e+02, 2.573583e+02, 2.606068e+02, 2.617355e+02, 2.571514e+02, 2.619369e+02, 2.545375e+02, 2.564748e+02, 2.543604e+02, 2.622621e+02, 2.595054e+02, 2.596787e+02, 2.630292e+02, 2.605999e+02, 2.515795e+02, 2.532290e+02, 2.592324e+02, 2.695883e+02, 2.581773e+02, 2.594164e+02, 2.595030e+02, 2.635397e+02, 2.595774e+02, 2.638470e+02, 2.568441e+02, 2.494732e+02, 2.573418e+02, 2.571671e+02, 2.515733e+02, 2.551146e+02, 2.528217e+02, 2.514349e+02, 2.538939e+02, 2.557692e+02, 2.661623e+02, 2.607972e+02, 2.581858e+02, 2.560430e+02, 2.567709e+02, 2.624532e+02, 2.606868e+02, 2.527179e+02, 2.606613e+02, 2.640610e+02, 2.551983e+02, 2.623135e+02, 2.595797e+02, 2.666678e+02, 2.578693e+02, 2.581113e+02, 2.671056e+02, 2.571827e+02, 2.682267e+02, 2.574251e+02, 2.487605e+02, 2.641083e+02, 2.531916e+02, 2.562647e+02, 2.598498e+02, 2.509216e+02, 2.564561e+02, 2.553094e+02, 2.573066e+02, 2.548884e+02, 2.516674e+02, 2.674456e+02, 2.519459e+02, 2.722346e+02, 2.549670e+02, 2.633219e+02, 2.535357e+02, 2.581700e+02, 2.516682e+02, 2.503617e+02, 2.558934e+02, 2.462047e+02, 2.510004e+02, 2.543568e+02, 2.559910e+02, 2.601573e+02, 2.627418e+02, 2.610913e+02, 2.639106e+02, 2.624867e+02, 2.536328e+02, 2.533941e+02, 2.653614e+02, 2.574896e+02, 2.541074e+02, 2.727476e+02, 2.479910e+02, 2.673441e+02, 2.635041e+02, 2.598325e+02, 2.634555e+02, 2.603096e+02, 2.610848e+02, 2.584413e+02, 2.559570e+02, 2.624654e+02, 2.595539e+02, 2.710840e+02, 2.644533e+02, 2.599537e+02, 2.628341e+02, 2.626411e+02, 2.586299e+02, 2.706426e+02, 2.649418e+02, 2.605489e+02, 2.585097e+02, 2.605462e+02, 2.663872e+02, 2.674237e+02, 2.704886e+02, 2.653105e+02, 2.655627e+02, 2.589806e+02, 2.582680e+02, 2.590786e+02, 2.548080e+02, 2.596650e+02, 2.589767e+02, 2.616456e+02, 2.550597e+02, 2.587292e+02, 2.633865e+02, 2.655375e+02, 2.556282e+02, 2.547338e+02, 2.562663e+02, 2.623679e+02, 2.565710e+02, 2.595813e+02, 2.615834e+02, 2.537254e+02, 2.605596e+02, 2.562451e+02, 2.608151e+02, 2.666358e+02, 2.606838e+02, 2.560305e+02, 2.588698e+02, 2.668157e+02, 2.655742e+02, 2.483133e+02, 2.530469e+02, 2.531272e+02, 2.604224e+02, 2.596042e+02, 2.560381e+02, 2.578245e+02, 2.523364e+02, 2.654797e+02, 2.625832e+02, 2.565088e+02, 2.620299e+02, 2.527124e+02, 2.584230e+02, 2.623648e+02, 2.579790e+02, 2.567578e+02, 2.583174e+02, 2.657964e+02, 2.622792e+02, 2.584329e+02, 2.626620e+02, 2.592337e+02, 2.551207e+02, 2.649054e+02, 2.649880e+02, 2.665642e+02, 2.623464e+02, 2.688075e+02, 2.537932e+02, 2.605499e+02, 2.619012e+02, 2.629073e+02, 2.620359e+02, 2.482938e+02, 2.590650e+02, 2.521588e+02, 2.542139e+02, 2.562995e+02, 2.614610e+02, 2.625995e+02, 2.558265e+02, 2.593798e+02, 2.530059e+02, 2.567704e+02, 2.481092e+02, 2.662389e+02, 2.606829e+02, 2.631623e+02, 2.645333e+02, 2.518885e+02, 2.619149e+02, 2.650521e+02, 2.538997e+02, 2.626762e+02, 2.654739e+02, 2.562315e+02, 2.612529e+02, 2.620729e+02, 2.574460e+02, 2.617957e+02, 2.671091e+02, 2.569639e+02, 2.624666e+02, 2.564518e+02, 2.609885e+02, 2.553858e+02, 2.625627e+02, 2.663961e+02, 2.520994e+02, 2.655213e+02, 2.610936e+02, 2.557237e+02, 2.638511e+02, 2.564925e+02, 2.646822e+02, 2.631583e+02, 2.421506e+02, 2.673450e+02, 2.683110e+02, 2.561403e+02, 2.650322e+02, 2.594386e+02, 2.588871e+02, 2.527629e+02, 2.570787e+02, 2.594270e+02, 2.563217e+02, 2.494739e+02, 2.618789e+02, 2.619359e+02, 2.481297e+02, 2.641058e+02, 2.602794e+02, 2.624154e+02, 2.568744e+02, 2.577100e+02, 2.641743e+02, 2.506200e+02, 2.571349e+02, 2.702948e+02, 2.509888e+02, 2.585863e+02, 2.562827e+02, 2.581178e+02, 2.614095e+02, 2.605920e+02, 2.587859e+02, 2.557815e+02, 2.536456e+02, 2.608133e+02, 2.608806e+02, 2.661772e+02, 2.574433e+02, 2.534770e+02, 2.738749e+02, 2.588625e+02, 2.511669e+02, 2.592117e+02, 2.581960e+02, 2.612290e+02, 2.649659e+02, 2.661234e+02, 2.589663e+02, 2.484892e+02, 2.562096e+02, 2.434256e+02, 2.589561e+02, 2.614630e+02, 2.671073e+02, 2.509098e+02, 2.636292e+02, 2.505926e+02, 2.566259e+02, 2.584780e+02, 2.692373e+02, 2.611925e+02, 2.685921e+02, 2.667161e+02, 2.650089e+02, 2.611505e+02, 2.531609e+02, 2.587947e+02, 2.628554e+02, 2.698259e+02, 2.657010e+02, 2.588488e+02, 2.537446e+02, 2.530655e+02, 2.583964e+02, 2.627311e+02, 2.641708e+02, 2.573459e+02, 2.641043e+02, 2.586177e+02, 2.632450e+02, 2.687273e+02, 2.659149e+02, 2.556830e+02, 2.553275e+02, 2.536702e+02, 2.681978e+02, 2.642177e+02, 2.604133e+02, 2.533591e+02, 2.565270e+02, 2.512302e+02, 2.568430e+02, 2.617215e+02, 2.605102e+02, 2.588820e+02, 2.664678e+02, 2.497718e+02, 2.598141e+02, 2.565512e+02, 2.524893e+02, 2.571238e+02, 2.629744e+02, 2.626274e+02, 2.533170e+02, 2.487930e+02, 2.693975e+02, 2.553716e+02, 2.606674e+02, 2.526443e+02, 2.580030e+02, 2.503197e+02, 2.497236e+02, 2.526473e+02, 2.561352e+02, 2.557579e+02, 2.606967e+02, 2.706853e+02, 2.621810e+02, 2.497494e+02, 2.515328e+02, 2.634008e+02, 2.505406e+02, 2.432760e+02, 2.612242e+02, 2.611006e+02, 2.546485e+02, 2.564626e+02, 2.649498e+02, 2.516784e+02, 2.574412e+02, 2.593383e+02, 2.552601e+02, 2.712967e+02, 2.620679e+02, 2.635575e+02, 2.606337e+02, 2.510099e+02, 2.550962e+02, 2.588965e+02, 2.564520e+02, 2.671048e+02, 2.560446e+02, 2.665699e+02, 2.599413e+02, 2.588783e+02, 2.536266e+02, 2.695912e+02, 2.574606e+02, 2.628342e+02, 2.578520e+02, 2.587469e+02, 2.526540e+02, 2.568739e+02, 2.602710e+02, 2.576889e+02, 2.624987e+02, 2.613366e+02, 2.498587e+02, 2.582802e+02, 2.578833e+02, 2.614739e+02, 2.514279e+02, 2.560871e+02, 2.614964e+02, 2.507526e+02, 2.617317e+02, 2.653291e+02, 2.604800e+02, 2.626541e+02, 2.541861e+02, 2.619838e+02, 2.633707e+02, 2.649547e+02, 2.559412e+02, 2.622419e+02, 2.665671e+02, 2.521393e+02, 2.641998e+02, 2.522396e+02, 2.530335e+02, 2.593849e+02, 2.661777e+02, 2.614013e+02, 2.607906e+02, 2.721377e+02, 2.427961e+02, 2.583016e+02, 2.573628e+02, 2.576605e+02, 2.619435e+02, 2.551798e+02, 2.639365e+02, 2.631189e+02, 2.670577e+02, 2.620462e+02, 2.646815e+02, 2.605657e+02, 2.653382e+02, 2.486752e+02, 2.626303e+02, 2.659031e+02, 2.558489e+02, 2.673033e+02, 2.601379e+02, 2.597100e+02, 2.604697e+02, 2.590048e+02, 2.660464e+02, 2.641678e+02, 2.513672e+02, 2.664744e+02, 2.513143e+02, 2.494381e+02, 2.547518e+02, 2.606122e+02, 2.595052e+02, 2.561292e+02, 2.578169e+02, 2.657147e+02, 2.529845e+02, 2.642760e+02, 2.505607e+02, 2.666844e+02, 2.683624e+02, 2.473005e+02, 2.564836e+02, 2.624385e+02, 2.558522e+02, 2.603482e+02, 2.663495e+02, 2.600591e+02, 2.639595e+02, 2.598102e+02, 2.557242e+02, 2.665164e+02, 2.598723e+02, 2.624118e+02, 2.655205e+02, 2.579150e+02, 2.503859e+02, 2.567819e+02, 2.705654e+02, 2.632073e+02, 2.533200e+02, 2.707792e+02, 2.557218e+02, 2.569035e+02, 2.595447e+02, 2.612095e+02, 2.712362e+02, 2.551607e+02, 2.666560e+02, 2.633778e+02, 2.708517e+02, 2.579509e+02, 2.573100e+02, 2.744913e+02, 2.587310e+02, 2.630106e+02, 2.584236e+02, 2.642602e+02, 2.564133e+02, 2.584472e+02, 2.638394e+02, 2.671717e+02, 2.446566e+02, 2.522511e+02, 2.570075e+02, 2.557244e+02, 2.592440e+02, 2.587512e+02, 2.523422e+02, 2.596305e+02, 2.591322e+02, 2.621768e+02, 2.618542e+02, 2.594672e+02, 2.624749e+02, 2.582722e+02, 2.521318e+02, 2.547264e+02, 2.561838e+02, 2.539335e+02, 2.674749e+02, 2.571081e+02, 2.590290e+02, 2.530834e+02, 2.641061e+02, 2.628566e+02, 2.617974e+02, 2.517757e+02, 2.580551e+02, 2.531265e+02, 2.640281e+02, 2.560547e+02, 2.561367e+02, 2.547438e+02, 2.696248e+02, 2.624187e+02, 2.673877e+02, 2.625133e+02, 2.596985e+02, 2.627728e+02, 2.615447e+02, 2.536881e+02, 2.625747e+02, 2.614579e+02, 2.490876e+02, 2.676930e+02, 2.635794e+02, 2.505809e+02, 2.644843e+02, 2.551718e+02, 2.609097e+02, 2.638574e+02, 2.568926e+02, 2.523706e+02, 2.589510e+02, 2.565921e+02, 2.585821e+02, 2.645547e+02, 2.644028e+02};

// this macro checks for errors in cuda calls
#define Err(ans) \
  { gpucheck((ans), __FILE__, __LINE__); }
inline void gpucheck(cudaError_t code, const char *file, int line) {
  if (code != cudaSuccess) {
    fprintf(stderr, "GPU Err: %s %s %d\n", cudaGetErrorString(code), file,
            line);
    exit(code);
  }
}

// TODO: modify this sequential implementation to implement a parallel reduce
__global__ void matrixMultiple(float *m, float *v1, float *v2, int n) {
  for (int row = 0; row < n; row++) {
    float sum = 0.0f;
    for (int col = 0; col < n; col++)
      sum += m[n * row + col] * v1[col];
    v2[row] = sum;
  }
}

float frand() {
  return rand() / (float)RAND_MAX;
}

int main(void) {
  float *m_h, *m_d;   // the matrix
  float *v1_h, *v1_d; // the vector that multiplies the matrix
  float *v2_h, *v2_d; // the result vector

  // allocate the memory
  Err(cudaMallocHost(&m_h, sizeof(float) * N * N));
  Err(cudaMalloc(&m_d, sizeof(float) * N * N));
  Err(cudaMallocHost(&v1_h, sizeof(float) * N));
  Err(cudaMalloc(&v1_d, sizeof(float) * N));
  Err(cudaMallocHost(&v2_h, sizeof(float) * N));
  Err(cudaMalloc(&v2_d, sizeof(float) * N));

  // initialize the matrix and vector using fix random numbers
  srand(0);
  for (int r = 0; r < N; r++)
    v1_h[r] = frand();
  for (int r = 0; r < N; r++)
    for (int c = 0; c < N; c++)
      m_h[r * N + c] = frand();

  // copy matrix and vector to GPU
  Err(cudaMemcpy(m_d, m_h, sizeof(float) * N * N, cudaMemcpyHostToDevice));
  Err(cudaMemcpy(v1_d, v1_h, sizeof(float) * N, cudaMemcpyHostToDevice));

  // do the multiply
  matrixMultiple<<<1, 1>>>(m_d, v1_d, v2_d, N); // <-- you will need to modify the number of block and blocks per thread

  // copy the result back
  Err(cudaMemcpy(v2_h, v2_d, sizeof(float) * N, cudaMemcpyDeviceToHost));

  // make a check vector
  //printf("float check[]={");
  //for (int r = 0; r < N; r++) printf("%s %e",(r>0?",":""),v2_h[r]);
  //printf("};");

  // check the result
  int problem = 0;
  for (int r = 0; r < N; r++) {
    if (fabs(check[r] - v2_h[r]) > 0.001) {
      printf("Error!! %d %e\n", r, fabs(check[r] - v2_h[r]));
      problem = 1;
    }
  }
  if (!problem)
    printf("Works Okay.\n");

  // free the memory
  cudaFree(m_h);
  cudaFree(m_d);
  cudaFree(v1_h);
  cudaFree(v1_d);
  cudaFree(v2_h);
  cudaFree(v2_d);
}
